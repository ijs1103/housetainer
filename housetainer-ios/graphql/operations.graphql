query MyPageUser($userId: UUID!) {
  user: membersCollection(first: 1, filter: {id: {eq: $userId}}) {
    edges {
      node {
        id
        memberType: member_type
        nickname
        profileUrl: profile_photo
      }
    }
  }
}

query MyPageInvitations($userId: UUID!) {
  invitations: invitationsCollection(
    first: 3
    filter: {inviter_id: {eq: $userId}}
    orderBy: {created_at: DescNullsLast}
  ) {
    edges {
      node {
        status
        name: invitee_name
      }
    }
  }
}

query MyPageHouses($ownerId: UUID!, $perPage: Int!, $cursor: Cursor) {
  houses: housesCollection(
    first: $perPage
    after: $cursor
    filter: {owner_id: {eq: $ownerId}}
    orderBy: {created_at: DescNullsLast}
  ) {
    edges {
      node {
        id
        imageUrls: image_urls
        title
      }
    }
    pageInfo {
      hasNextPage
      cursor: endCursor
    }
  }
}

query MyPageMyEvents($ownerId: UUID!, $current: Datetime!, $perPage: Int!, $cursor: Cursor) {
  events: eventsCollection(
    first: $perPage
    after: $cursor
    filter: {owner_id: {eq: $ownerId}, date: {gte: $current}}
    orderBy: {date: AscNullsLast}
  ) {
    edges {
      node {
        id
        imageName: file_name
        title
        scheduleType: schedule_type
        date
        members {
          id
          nickname
          memberType: member_type
        }
      }
    }
    pageInfo {
      hasNextPage
      cursor: endCursor
    }
  }
}

query MyPageBookmarkedEvents($ownerId: UUID!, $perPage: Int!, $cursor: Cursor) {
  events: event_bookmarksCollection(
    first: $perPage
    after: $cursor
    filter: {owner_id: {eq: $ownerId}}
    orderBy: {created_at: DescNullsLast}
  ) {
    edges {
      node {
        event: events {
          id
          imageName: file_name
          title
          scheduleType: schedule_type
          date
          members {
            id
            nickname
            memberType: member_type
          }
        }
      }
    }
    pageInfo {
      hasNextPage
      cursor: endCursor
    }
  }
}

mutation DeleteEventBookmark($id: UUID!) {
    deleteFromevent_bookmarksCollection(
        filter: {event_id: {eq: $id}}
    ){
        affectedCount
    }
}

mutation CreateEventBookmark($id: UUID!, $ownerId: UUID!, $createdAt: Datetime!) {
    insertIntoevent_bookmarksCollection(
        objects: [
          {owner_id: $ownerId, event_id: $id, created_at: $createdAt}
        ]
    ){
        affectedCount
    }
}

query UserProfile($id: UUID!){
    userProfile: membersCollection(first: 1, filter: {id: {eq: $id}}){
        edges {
            node {
                id
                memberType: member_type
                nickname
                profileUrl: profile_photo
                memberType: member_type
                email:login_id
                gender
                birthday
            }
        }
    }
}

mutation UpdateUserProfile($id: UUID!, $profileUrl: String, $gender: String, $birthday: Date){
  userProfile: updatemembersCollection(
    filter: {id: {eq: $id}},
    set: {
        profile_photo: $profileUrl,
        gender: $gender,
        birthday: $birthday
    }){
    affectedCount
  }
}

query UserNickname($id: UUID!){
    userProfile: membersCollection(first: 1, filter: {id: {eq: $id}}){
        edges {
            node {
                id
                nickname
            }
        }
    }
}

query ExistUserNickname($nickname: String!){
    userProfile: membersCollection(first: 1, filter: {nickname: {eq: $nickname}}){
        edges {
            node {
                id
            }
        }
    }
}

mutation UpdateUserNickname($id: UUID!, $nickname: String!){
  userProfile: updatemembersCollection(
    filter: {id: {eq: $id}},
    set: {
        nickname: $nickname,
    }){
    affectedCount
  }
}

mutation InviteUser($ownerId: UUID!, $name: String!, $email: String!, $code: String!, $createdAt: Datetime!){
    inviteUser: insertIntoinvitationsCollection(objects: [
        {created_at: $createdAt, code: $code, inviter_id: $ownerId, invitee_name: $name, invitee_email: $email, status: "S"}
    ]){
        affectedCount
    }
}

mutation CreateSocialCalendar($title: String!, $scheduleType: String!, $ownerId: UUID!, $date: Datetime, $description: String!, $link: String, $fileName: String!) {
    socialCalendar: insertIntoeventsCollection(
        objects: [
          {
            title: $title,
            schedule_type: $scheduleType,
            owner_id: $ownerId,
            date: $date,
            detail: $description,
            related_link: $link,
            display_type: "Y",
            file_name: $fileName
          }
        ]
    ){
        affectedCount
    }
}

mutation CreateHouseInfo($category: String!, $domestic: Boolean!, $location: String!, $detailedLocation: String!, $coverImageIndex: Int!, $imageUrls: [String]!, $shortDescription: String!, $description: String!, $ownerId: UUID!) {
    houseInfo: insertIntohousesCollection(
        objects: [
          {
            owner_id: $ownerId,
            name: $shortDescription,
            category: $category,
            title: $shortDescription,
            content: $description,
            image_urls: $imageUrls,
            cover_image_index: $coverImageIndex,
            domestic: $domestic,
            location: $location,
            detailed_location: $detailedLocation
          }
        ]
    ){
        affectedCount
    }
}
